knitr::opts_chunk$set(echo = TRUE)
library(knitr)
df <- read.csv("./chrom.csv", header = TRUE)
kable(df)
names(knitr::knit_engines$get())
clear
clear()
View(df)
ls
ls()
installed.packages("tidyverse")
install.packages("tidyverse")
clear()
clear
str(USPersonalExpenditure)
USPersonalExpenditure
tmp = state.center
tmp
tmp$z <- 1:50
tmp
tmp %>% str()
library(magrittr)
tmp %>% str()
tmp %>% str
tmp$z <- toString(tmp$z)
tmp %>% str
c(state.name, state.area) %>% data.frame
tmp <- c(state.name, state.area) %>% data.frame
tmp
tmp <- list(state.name, state.area) %>% data.frame
tmp
str(tmp)
tmp <- list(state.name, state.abb, state.area, state.center) %>% data.frame
str(tmp)
library(ggplot2)
pwd()
pws
pwd
dir()
tmp <- read.table("./Documents/angsd/ablation.csv", sep = ',', stringsAsFactors = FALSE)
head(tmp)
str(mtp)
str(tmp)
tmp <- read.table("./Documents/angsd/ablation.csv", sep = ',', stringsAsFactors = FALSE, header = TRUE)
head(tmp)
str(tmp)
class(tmp)
table(tmp$Measurement)
table(tmp$Experiment)
ggplot(data = tmp, aes(x = Time, y = Score))
ggplot(data = tmp, aes(x = Time, y = Score)) + geom_point()
ggplot(data = tmp, aes(x = Time, y = Score)) + geom_point(size = 4, shape = 2, alpha = 0.5)
ggplot(data = tmp, aes(x = Time, y = Score)) + geom_point(size = 4, aes(shape = CellType))
ggplot(data = tmp, aes(x = Time, y = Score)) + geom_point(size = 4, aes(shape = CellType, color = CellTyoe))
ggplot(data = tmp, aes(x = Time, y = Score)) + geom_point(size = 4, aes(shape = CellType, color = CellType))
ggplot(data = tmp, aes(x = Time, y = Score)) + geom_point(size = 4, aes(shape = CellType, color = Experiement))
ggplot(data = tmp, aes(x = Time, y = Score)) + geom_point(size = 4, aes(shape = CellType, color = Experiment))
ggplot(data = tmp, aes(x = Time, y = Score)) + geom_point(size = 4, aes(shape = CellType, color = Experiment)) + scale_shape_manual(values = c(1, 4))
ggplot(data = tmp, aes(x = Time, y = Score)) + geom_point(size = 4, aes(shape = CellType, color = Experiment)) + scale_shape_manual(values = c(1, 4)) + facet_grid(CellType-Experiment)
ggplot(data = tmp, aes(x = Time, y = Score)) + facet_grid(CellType - Experiment)
?facet_grid
library(tidyr)
?gather
library(ggplot2)
library(DESeq2)
library(magrittr)
setwd("~/Documents/angsd/ANGSD-Course-2020/project")
df <- read.table("featureCounts_human.txt", header = TRUE, stringsAsFactors = FALSE)
head(df)
names(readcounts)
names(df)
# load in feature counts file and preprocess the data before DESeq2
readcounts <- read.table("../hw7/featureCounts_Gierlinski_gene.txt", header = TRUE, stringsAsFactors = FALSE)
names(readcounts)
names(df)[7:]
names(df)[1:6]
names(df) <- c(names(df)[1:6], "MSDP075", "SDPC082")
names(df)
row.names(readcounts)
readcounts$Geneid
df$Geneid
len(df$Geneid)
length(df$Geneid)
make.names(readcounts$Geneid)
df$Geneid
readcounts$Geneid
row.names(df) <- make.names(df$Geneid)
readcounts[, -c(1:6)]
row.names(readcounts) <- make.names(readcounts$Geneid)
View(readcounts)
readcounts <- readcounts[, -c(1:6)]
df <- df[ ,-c(1:6)]
names(readcounts)
names(df)
sample_info <- DataFrame(condition = gsub("_[0-9]+", "", names(readcounts)), row.names = names(readcounts))
View(sample_info)
gsub("_[0-9]+", "", names(readcounts))
str(df)
gsub("[0-9]+", "", names(df))
col_data <- DataFrame(condition = gsub("[0-9]+", "", names(df)), row.names = names(df))
str(col_data)
# Create DESeq object
DESeq.df <- DESeqDataSetFromMatrix(countData = df, colData = col_data, design = ~ condition)
dim(DESeq.df)
head(counts(DESeq.df))
colSums(counts(DESeq.df))
# remove genes that have no counts
DESeq.df <- DESeq.df[rowSums(counts(DESeq.df)) > 0, ]
dim(DESeq.df)
# calculate SFs and add them to the object
DESeq.df <- estimateSizeFactors(DESeq.df)
plot(sizeFactors(DESeq.df), colSums(counts(DESeq.df)), ylab = "library size", xlab = "size factors")
DESeq.df
par(mfrow = c(1,2))
boxplot(log2(counts(DESeq.df) + 1), notch = TRUE, main = "Non-normalized read counts", ylab = "log2(read counts)")
boxplot(log2(counts(DESeq.df, normalize = TRUE) + 1), notch = TRUE, main = "Size-Factor normalized read counts", ylab = "log2(read counts)")
counts(DESeq.df, normalize = TRUE)
counts(DESeq.df)
# assign log normalized counts to a matrix
assay(DESeq.df, "log.norm.counts") <- log2(counts(DESeq.df, normalized = TRUE) + 1)
DESeq.rlog <- rlog(DESeq.df, blind = TRUE)
as.dist(1-corr_coeff) %>% hclust %>% plot( ., labels = colnames(rlog.norm.counts),main = "rlog transformed read counts")
# plot dendrogram
corr_coeff <-cor(assay(DESeq.df, "log.norm.counts"), method = "pearson")
rlog.norm.counts <- assay(DESeq.df, "log.norm.counts")
as.dist(1-corr_coeff) %>% hclust %>% plot( ., labels = colnames(rlog.norm.counts),main = "rlog transformed read counts")
rlog.norm.counts <- assay(DESeq.df, "log.norm.counts")
as.dist(1-corr_coeff) %>% hclust %>% plot( ., labels = colnames(rlog.norm.counts),main = "rlog transformed read counts")
# run pca and plot the result
rv <-rowVars(assay(DESeq.rlog))
top_variable <-order(rv, decreasing = TRUE)[seq_len(500)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESeq.rlog)
par(mfrow = c(1,1))
# assign log normalized counts to a matrix
assay(DESeq.df, "log.norm.counts") <- log2(counts(DESeq.df, normalized = TRUE) + 1)
DESeq.rlog <- rlog(DESeq.df, blind = TRUE)
# plot dendrogram
corr_coeff <-cor(assay(DESeq.df, "log.norm.counts"), method = "pearson")
rlog.norm.counts <- assay(DESeq.df, "log.norm.counts")
as.dist(1-corr_coeff) %>% hclust %>% plot( ., labels = colnames(rlog.norm.counts),main = "rlog transformed read counts")
# run pca and plot the result
rv <-rowVars(assay(DESeq.rlog))
top_variable <-order(rv, decreasing = TRUE)[seq_len(500)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESeq.rlog)
counts <- read.table("../hw7/featureCounts_Gierlinski_gene.txt", header = TRUE, stringsAsFactors = FALSE)
names(readcounts) <- c(names(readcounts)[1:6], "SNF2_1", "SNF2_2", "SNF2_3", "SNF2_4", "SNF2_5", "WT_1", "WT_2", "WT_3", "WT_4", "WT_5")
# load in feature counts file and preprocess the data before DESeq2
readcounts <- read.table("../hw7/featureCounts_Gierlinski_gene.txt", header = TRUE, stringsAsFactors = FALSE)
names(readcounts) <- c(names(readcounts)[1:6], "SNF2_1", "SNF2_2", "SNF2_3", "SNF2_4", "SNF2_5", "WT_1", "WT_2", "WT_3", "WT_4", "WT_5")
row.names(readcounts) <- make.names(readcounts$Geneid)
readcounts <- readcounts[, -c(1:6)]
sample_info <- DataFrame(condition = gsub("_[0-9]+", "", names(readcounts)), row.names = names(readcounts))
# Create DESeq object
DESeq.df <- DESeqDataSetFromMatrix(countData = readcounts, colData = sample_info, design = ~ condition)
# remove genes that have no counts
DESeq.df <- DESeq.df[rowSums(counts(DESeq.df)) > 0, ]
dim(DESeq.df)
# calculate SFs and add them to the object
DESeq.df <- estimateSizeFactors(DESeq.df)
# assign log normalized counts to a matrix
assay(DESeq.df, "log.norm.counts") <- log2(counts(DESeq.df, normalized = TRUE) + 1)
# create optimized log object
DESeq.rlog <- rlog(DESeq.df, blind = TRUE)
# create optimized log object
DESeq.rlog <- rlog(DESeq.df, blind = TRUE)
# save objects for future use
save.image(file = "RNAseqGierlinski.RData")
# plot dendrogram
corr_coeff <-cor(assay(DESeq.df, "log.norm.counts"), method = "pearson")
rlog.norm.counts <- assay(DESeq.df, "log.norm.counts")
as.dist(1-corr_coeff) %>% hclust %>% plot( ., labels = colnames(rlog.norm.counts),main = "rlog transformed read counts")
as.dist(1-corr_coeff) %>% hclust %>% plot( ., labels = colnames(rlog.norm.counts),main = "rlog transformed read counts")
# run pca and plot the result
rv <-rowVars(assay(DESeq.rlog))
top_variable <-order(rv, decreasing = TRUE)[seq_len(500)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESeq.rlog)
df <- read.table("featureCounts_human.txt", header = TRUE, stringsAsFactors = FALSE)
head(df)
names(df) <- c(names(df)[1:6], "MSDP075", "SDPC082")
row.names(df) <- make.names(df$Geneid)
df <- df[ ,-c(1:6)]
col_data <- DataFrame(condition = gsub("[0-9]+", "", names(df)), row.names = names(df))
# Create DESeq object
DESeq.df <- DESeqDataSetFromMatrix(countData = df, colData = col_data, design = ~ condition)
dim(DESeq.df)
# remove genes that have no counts
DESeq.df <- DESeq.df[rowSums(counts(DESeq.df)) > 0, ]
dim(DESeq.df)
# calculate SFs and add them to the object
DESeq.df <- estimateSizeFactors(DESeq.df)
plot(sizeFactors(DESeq.df), colSums(counts(DESeq.df)), ylab = "library size", xlab = "size factors")
# par(mfrow = c(1,1))
# boxplot(log2(counts(DESeq.df) + 1), notch = TRUE, main = "Non-normalized read counts", ylab = "log2(read counts)")
# boxplot(log2(counts(DESeq.df, normalize = TRUE) + 1), notch = TRUE, main = "Size-Factor normalized read counts", ylab = "log2(read counts)")
# assign log normalized counts to a matrix
assay(DESeq.df, "log.norm.counts") <- log2(counts(DESeq.df, normalized = TRUE) + 1)
DESeq.rlog <- rlog(DESeq.df, blind = TRUE)
# plot dendrogram
corr_coeff <-cor(assay(DESeq.df, "log.norm.counts"), method = "pearson")
rlog.norm.counts <- assay(DESeq.df, "log.norm.counts")
as.dist(1-corr_coeff) %>% hclust %>% plot( ., labels = colnames(rlog.norm.counts),main = "rlog transformed read counts")
# run pca and plot the result
rv <-rowVars(assay(DESeq.rlog))
top_variable <-order(rv, decreasing = TRUE)[seq_len(2000)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESeq.rlog)
top_variable
len(order(rv, decreasing = TRUE))
length(order(rv, decreasing = TRUE))
top_variable <-order(rv, decreasing = TRUE)[seq_len(10000)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESeq.rlog)
top_variable <-order(rv, decreasing = TRUE)
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESeq.rlog)
corr_coeff
# run pca and plot the result
rv <-rowVars(assay(DESeq.rlog))
top_variable <-order(rv, decreasing = TRUE)[seq_len(10000)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESeq.rlog)
plotPCA(DESeq.rlog, shape_by=NULL)
plotPCA(DESeq.rlog, size_by=NULL)
?plotPCA()
?plotPCA()
plotPCA()
?plotPCA
top_variable <-order(rv, decreasing = TRUE)[seq_len(10)]
top_variable
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
top_variable <-order(rv, decreasing = TRUE)[seq_len(1)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
top_variable <-order(rv, decreasing = TRUE)[seq_len(2)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESeq.rlog, size_by=NULL)
plotPCA(DESeq.rlog)
top_variable <-order(rv, decreasing = TRUE)[seq_len(500)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESeq.rlog)
# run pcaExplorer
pcaExplorer::pcaExplorer(dds = DESeq.df, dst = DESeq.rlog)
pca
order(rv, decreasing = TRUE)
t(assay(DESeq.rlog)
)
# run pcaExplorer
pcaExplorer::pcaExplorer(dds = DESeq.df, dst = DESeq.rlog)
and plot the result
rv <-rowVars(assay(DESeq.rlog))
top_variable <-order(rv, decreasing = TRUE)[seq_len(500)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESeq.rlog)
-rowVars(assay(DESeq.rlog))
top_variable <-order(rv, decreasing = TRUE)[seq_len(500)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESe
-rowVars(assay(DESeq.rlog))
top_variable <-order(rv, decreasing = TRUE)[seq_len(500)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESe
-rowVars(assay(DESeq.rlog))
top_variable <-order(rv, decreasing = TRUE)[seq_len(500)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESe
-rowVars(assay(DESeq.rlog))
top_variable <-order(rv, decreasing = TRUE)[seq_len(500)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESe
-rowVars(assay(DESeq.rlog))
top_variable <-order(rv, decreasing = TRUE)[seq_len(500)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESe
# run pca and plot the result
rv <-rowVars(assay(DESeq.rlog))
top_variable <-order(rv, decreasing = TRUE)[seq_len(500)]
owVars(assay(DESeq.rlog))
top_variable <-order(rv, decreasing = TRUE)[seq_len(500)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESeq.rlog)
df
df <- read.table("featureCounts_human.txt", header = TRUE, stringsAsFactors = FALSE)
head(df)
names(df) <- c(names(df)[1:6], "MSDP075", "SDPC082")
df <- df[ ,-c(1:6)]
df
class(df)
cbind(df, df)
df <- cbind(df, df)
col_data <- DataFrame(condition = gsub("[0-9]+", "", names(df)), row.names = names(df))
# Create DESeq object
DESeq.df <- DESeqDataSetFromMatrix(countData = df, colData = col_data, design = ~ condition)
dim(DESeq.df)
# remove genes that have no counts
DESeq.df <- DESeq.df[rowSums(counts(DESeq.df)) > 0, ]
dim(DESeq.df)
# calculate SFs and add them to the object
DESeq.df <- estimateSizeFactors(DESeq.df)
plot(sizeFactors(DESeq.df), colSums(counts(DESeq.df)), ylab = "library size", xlab = "size factors")
# assign log normalized counts to a matrix
assay(DESeq.df, "log.norm.counts") <- log2(counts(DESeq.df, normalized = TRUE) + 1)
DESeq.rlog <- rlog(DESeq.df, blind = TRUE)
# plot dendrogram
corr_coeff <-cor(assay(DESeq.df, "log.norm.counts"), method = "pearson")
rlog.norm.counts <- assay(DESeq.df, "log.norm.counts")
as.dist(1-corr_coeff) %>% hclust %>% plot( ., labels = colnames(rlog.norm.counts),main = "rlog transformed read counts")
# run pca and plot the result
rv <-rowVars(assay(DESeq.rlog))
top_variable <-order(rv, decreasing = TRUE)[seq_len(500)]
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
plotPCA(DESeq.rlog)
?prcomp
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]), scale. = TRUE)
head(pca$x)
plotPCA(DESeq.rlog)
pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
head(pca$x)
pca_data <- plotPCA(DESeq.rlog, returnData=TRUE)
View(pca_data)
p<-ggplot(pca_data,aes(x=PC1,y=PC2,color=group ))
p<-p+geom_point()
p
top_variable
rv
?rowVars
dim(rv)
length(rv)
assay(DESeq.rlog)
dim(assay(DESeq.rlog))
length(rv)
# pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
pca <-prcomp(t(assay(DESeq.rlog)))
head(pca$x)
plotPCA(DESeq.rlog)
# pca <-prcomp(t(assay(DESeq.rlog)[top_variable, ]))
pca <-prcomp(t(assay(DESeq.rlog)), scale. = TRUE, center = TRUE)
head(pca$x)
plotPCA(DESeq.rlog)
# run pcaExplorer
pcaExplorer::pcaExplorer(dds = DESeq.df, dst = DESeq.rlog)
# run pcaExplorer
pcaExplorer::pcaExplorer(dds = DESeq.df, dst = DESeq.rlog)
# run pcaExplorer
pcaExplorer::pcaExplorer(dds = DESeq.df, dst = DESeq.rlog)
DESeq.df
assay(DESeq.df)
head(df)
df <- read.table("featureCounts_human.txt", header = TRUE, stringsAsFactors = FALSE)
head(df)
names(df) <- c(names(df)[1:6], "MSDP075", "SDPC082")
row.names(df) <- make.names(df$Geneid)
head(df)
df <- df[ ,-c(1:6)]
head(df)
df <- cbind(df, df)
head(df)
col_data <- DataFrame(condition = gsub("[0-9]+", "", names(df)), row.names = names(df))
head(df)
# Create DESeq object
DESeq.df <- DESeqDataSetFromMatrix(countData = df, colData = col_data, design = ~ condition)
head(df)
dim(DESeq.df)
# remove genes that have no counts
DESeq.df <- DESeq.df[rowSums(counts(DESeq.df)) > 0, ]
dim(DESeq.df)
# calculate SFs and add them to the object
DESeq.df <- estimateSizeFactors(DESeq.df)
plot(sizeFactors(DESeq.df), colSums(counts(DESeq.df)), ylab = "library size", xlab = "size factors")
assay(DESeq.df)
# assign log normalized counts to a matrix
assay(DESeq.df, "log.norm.counts") <- log2(counts(DESeq.df, normalized = TRUE) + 1)
assay(DESeq.df)
DESeq.rlog <- rlog(DESeq.df, blind = TRUE)
# run pcaExplorer
pcaExplorer::pcaExplorer(dds = DESeq.df, dst = DESeq.rlog)
library(ggplot2)
library(DESeq2)
library(magrittr)
df <- read.table("featureCounts_human.txt", header = TRUE, stringsAsFactors = FALSE)
head(df)
head(df)
names(df) <- c(names(df)[1:6], "MSDP075", "SDPC082")
df <- read.table("featureCounts_human.txt", header = TRUE, stringsAsFactors = FALSE)
head(df)
df <- read.table("featureCounts_human.txt", header = TRUE, stringsAsFactors = FALSE)
head(df)
names(df) <- c(names(df)[1:6], "MSDP075", "MSDP080", "SDPC082", "SDPC087")
head(df)
row.names(df) <- make.names(df$Geneid)
df <- df[ ,-c(1:6)]
df <- cbind(df, df)
df <- read.table("featureCounts_human.txt", header = TRUE, stringsAsFactors = FALSE)
head(df)
names(df) <- c(names(df)[1:6], "MSDP075", "MSDP080", "SDPC082", "SDPC087")
row.names(df) <- make.names(df$Geneid)
df <- df[ ,-c(1:6)]
col_data <- DataFrame(condition = gsub("[0-9]+", "", names(df)), row.names = names(df))
# Create DESeq object
DESeq.df <- DESeqDataSetFromMatrix(countData = df, colData = col_data, design = ~ condition)
dim(DESeq.df)
# remove genes that have no counts
DESeq.df <- DESeq.df[rowSums(counts(DESeq.df)) > 0, ]
dim(DESeq.df)
# calculate SFs and add them to the object
DESeq.df <- estimateSizeFactors(DESeq.df)
plot(sizeFactors(DESeq.df), colSums(counts(DESeq.df)), ylab = "library size", xlab = "size factors")
# assign log normalized counts to a matrix
assay(DESeq.df, "log.norm.counts") <- log2(counts(DESeq.df, normalized = TRUE) + 1)
DESeq.rlog <- rlog(DESeq.df, blind = TRUE)
# plot dendrogram
corr_coeff <-cor(assay(DESeq.df, "log.norm.counts"), method = "pearson")
rlog.norm.counts <- assay(DESeq.df, "log.norm.counts")
as.dist(1-corr_coeff) %>% hclust %>% plot( ., labels = colnames(rlog.norm.counts),main = "rlog transformed read counts")
# run pca and plot the result
pca_data <- plotPCA(DESeq.rlog, returnData=TRUE)
p<-ggplot(pca_data,aes(x=PC1,y=PC2,color=group ))
p<-p+geom_point()
p
# run pcaExplorer
pcaExplorer::pcaExplorer(dds = DESeq.df, dst = DESeq.rlog)
[Dengrogram](hhierarchy.png)
# run pcaExplorer
pcaExplorer::pcaExplorer(dds = DESeq.df, dst = DESeq.rlog)
